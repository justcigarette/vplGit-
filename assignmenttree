#include <iostream>
#include <vector>
#include <string>
using namespace std;


struct BookNode {
    string title;            
    int pages;                
    vector<BookNode*> children; 

    BookNode(string t, int p) : title(t), pages(p) {}
};

void addChild(BookNode* parent, BookNode* child) {
    parent->children.push_back(child);
}


int countChapters(BookNode* root) {
    return root->children.size();
}


int getTotalPages(BookNode* node) {
    int totalPages = node->pages;
    for (BookNode* child : node->children) {
        totalPages += getTotalPages(child);
    }
    return totalPages;
}

BookNode* findLongestChapter(BookNode* root) {
    BookNode* longestChapter = nullptr;
    int maxPages = 0;

    for (BookNode* chapter : root->children) {
        int totalPages = getTotalPages(chapter);
        if (totalPages > maxPages) {
            maxPages = totalPages;
            longestChapter = chapter;
        }
    }
    return longestChapter;
}

bool findAndRemove(BookNode* node, const string& title) {
    for (auto it = node->children.begin(); it != node->children.end(); ++it) {
        if ((*it)->title == title) {
            node->pages -= getTotalPages(*it);
            delete *it; 
            node->children.erase(it);
            return true;
        }
       
        if (findAndRemove(*it, title)) {
            node->pages -= getTotalPages(*it);
            return true;
        }
    }
    return false;
}

void printBookTree(BookNode* node, int depth = 0) {
    for (int i = 0; i < depth; ++i) cout << "  ";
    cout << "- " << node->title << " (" << node->pages << " pages)" << endl;
    for (BookNode* child : node->children) {
        printBookTree(child, depth + 1);
    }
}
\
int main() {
    BookNode* book = new BookNode("My Book", 0);

    BookNode* chapter1 = new BookNode("Chapter 1", 10);
    BookNode* chapter2 = new BookNode("Chapter 2", 15);
    BookNode* section1 = new BookNode("Section 1.1", 5);
    BookNode* section2 = new BookNode("Section 2.1", 7);

    addChild(chapter1, section1);
    addChild(chapter2, section2);
    addChild(book, chapter1);
    addChild(book, chapter2);

    cout << "So chong: " << countChapters(book) << endl;

    BookNode* longestChapter = findLongestChapter(book);
    if (longestChapter) {
        cout << "Chong dai nhat: " << longestChapter->title << endl;
    }

    findAndRemove(book, "Section 2.1");
    cout << "Sau khi xoÃ¡ Section 2.1:" << endl;
    printBookTree(book);

    delete book;

    return 0;
}
